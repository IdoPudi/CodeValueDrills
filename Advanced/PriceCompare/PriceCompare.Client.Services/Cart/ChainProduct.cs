/* 
 * PriceCompare.Backend.Services.WebApi
 *
 * No descripton provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

using Newtonsoft.Json;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Runtime.Serialization;
using System.Text;
using System.Threading.Tasks;

namespace PriceCompare.Client.Services.Cart
{
    /// <summary>
    /// ChainProduct
    /// </summary>
    [DataContract]
    public partial class ChainProduct : IEquatable<ChainProduct>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ChainProduct" /> class.
        /// </summary>
        /// <param name="ProductChainId">ProductChainId.</param>
        /// <param name="ProductId">ProductId.</param>
        /// <param name="ProductPrice">ProductPrice.</param>
        /// <param name="ChainId">ChainId.</param>
        public ChainProduct(string ProductChainId = null, Guid? ProductId = null, double? ProductPrice = null, string ChainId = null)
        {
            this.ProductChainId = ProductChainId;
            this.ProductId = ProductId;
            this.ProductPrice = ProductPrice;
            this.ChainId = ChainId;
        }

        /// <summary>
        /// Gets or Sets ProductChainId
        /// </summary>
        [DataMember(Name = "ProductChainId", EmitDefaultValue = false)]
        public string ProductChainId { get; set; }
        /// <summary>
        /// Gets or Sets ProductId
        /// </summary>
        [DataMember(Name = "ProductId", EmitDefaultValue = false)]
        public Guid? ProductId { get; set; }
        /// <summary>
        /// Gets or Sets ProductPrice
        /// </summary>
        [DataMember(Name = "ProductPrice", EmitDefaultValue = false)]
        public double? ProductPrice { get; set; }
        /// <summary>
        /// Gets or Sets ChainId
        /// </summary>
        [DataMember(Name = "ChainId", EmitDefaultValue = false)]
        public string ChainId { get; set; }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ChainProduct {\n");
            sb.Append("  ProductChainId: ").Append(ProductChainId).Append("\n");
            sb.Append("  ProductId: ").Append(ProductId).Append("\n");
            sb.Append("  ProductPrice: ").Append(ProductPrice).Append("\n");
            sb.Append("  ChainId: ").Append(ChainId).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as ChainProduct);
        }

        /// <summary>
        /// Returns true if ChainProduct instances are equal
        /// </summary>
        /// <param name="other">Instance of ChainProduct to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ChainProduct other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return
                (
                    this.ProductChainId == other.ProductChainId ||
                    this.ProductChainId != null &&
                    this.ProductChainId.Equals(other.ProductChainId)
                ) &&
                (
                    this.ProductId == other.ProductId ||
                    this.ProductId != null &&
                    this.ProductId.Equals(other.ProductId)
                ) &&
                (
                    this.ProductPrice == other.ProductPrice ||
                    this.ProductPrice != null &&
                    this.ProductPrice.Equals(other.ProductPrice)
                ) &&
                (
                    this.ChainId == other.ChainId ||
                    this.ChainId != null &&
                    this.ChainId.Equals(other.ChainId)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.ProductChainId != null)
                    hash = hash * 59 + this.ProductChainId.GetHashCode();
                if (this.ProductId != null)
                    hash = hash * 59 + this.ProductId.GetHashCode();
                if (this.ProductPrice != null)
                    hash = hash * 59 + this.ProductPrice.GetHashCode();
                if (this.ChainId != null)
                    hash = hash * 59 + this.ChainId.GetHashCode();
                return hash;
            }
        }
    }
}
