/* 
 * PriceCompare.Backend.Services.WebApi
 *
 * No descripton provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

using Newtonsoft.Json;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Runtime.Serialization;
using System.Text;
using System.Threading.Tasks;

namespace PriceCompare.Client.Services.Catalog
{
    /// <summary>
    /// CatalogProduct
    /// </summary>
    [DataContract]
    public partial class CatalogProduct : IEquatable<CatalogProduct>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CatalogProduct" /> class.
        /// </summary>
        /// <param name="Id">Id.</param>
        /// <param name="ProductName">ProductName.</param>
        /// <param name="ByWeight">ByWeight.</param>
        public CatalogProduct(Guid? Id = null, string ProductName = null, bool? ByWeight = null)
        {
            this.Id = Id;
            this.ProductName = ProductName;
            this.ByWeight = ByWeight;
        }

        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name = "Id", EmitDefaultValue = false)]
        public Guid? Id { get; set; }
        /// <summary>
        /// Gets or Sets ProductName
        /// </summary>
        [DataMember(Name = "ProductName", EmitDefaultValue = false)]
        public string ProductName { get; set; }
        /// <summary>
        /// Gets or Sets ByWeight
        /// </summary>
        [DataMember(Name = "ByWeight", EmitDefaultValue = false)]
        public bool? ByWeight { get; set; }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class CatalogProduct {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  ProductName: ").Append(ProductName).Append("\n");
            sb.Append("  ByWeight: ").Append(ByWeight).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as CatalogProduct);
        }

        /// <summary>
        /// Returns true if CatalogProduct instances are equal
        /// </summary>
        /// <param name="other">Instance of CatalogProduct to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(CatalogProduct other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return
                (
                    this.Id == other.Id ||
                    this.Id != null &&
                    this.Id.Equals(other.Id)
                ) &&
                (
                    this.ProductName == other.ProductName ||
                    this.ProductName != null &&
                    this.ProductName.Equals(other.ProductName)
                ) &&
                (
                    this.ByWeight == other.ByWeight ||
                    this.ByWeight != null &&
                    this.ByWeight.Equals(other.ByWeight)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.Id != null)
                    hash = hash * 59 + this.Id.GetHashCode();
                if (this.ProductName != null)
                    hash = hash * 59 + this.ProductName.GetHashCode();
                if (this.ByWeight != null)
                    hash = hash * 59 + this.ByWeight.GetHashCode();
                return hash;
            }
        }
    }
}
